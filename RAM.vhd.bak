LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY RAM IS
PORT
	(
		tipo_acc : in std_logic_vector(1 downto 0);
		addr : in std_logic_vector (11 downto 0);
		Din : in std_logic_vector (31 downto 0);
		l_u, we_ram, clk : in std_logic;
		Dout : out std_logic_vector(31 downto 0)
	);
END RAM;

architecture behavioural of RAM is

signal Din1, b0, b1, b2, b3 : std_logic_vector(7 downto 0);
signal Din2 : std_logic_vector(7 downto 0);
signal Din3 : std_logic_vector(7 downto 0);
signal we_w, we_h0, we_h1, we_b0, we_b1, we_b2, we_b3, we0, we1, we2, we3 : std_logic;
signal SigExtSig0, SigExtSig1 : std_logic_vector(31 downto 0);
signal Dout0 : std_logic_vector(7 downto 0);
signal Dout1 : std_logic_vector(15 downto 0);
signal VCDout : std_logic_vector (23 downto 0);
signal DSDout : std_logic_vector(15 downto 0);
signal s0, s1 : std_logic;

begin 

we0 <= we_w or we_h0 or we_b0;
we1 <= we_w or we_h0 or we_b1;
we2 <= we_w or we_h1 or we_b2;
we3 <= we_w or we_h1 or we_b3;

RAM0 : entity work.RAM_block
port map(
	address => addr(11 downto 2),
	clock	=> clk,
	data => Din(7 downto 0),
	wren => we0,
	q => b0
	);

with tipo_acc select
	Din1 <= Din(7 downto 0) when "00", 
			  Din(15 downto 8) when "01",
			  Din(15 downto 8) when "10",
			  (others => '0') when others;
	
RAM1 : entity work.RAM_block
port map(
	address => addr(11 downto 2),
	clock	=> clk,
	data => Din1,
	wren => we1,
	q => b1
);

with tipo_acc select
	Din2 <= Din(7 downto 0) when "00", 
			  Din(7 downto 0) when "01",
			  Din(23 downto 16) when "10",
			  (others => '0') when others;

RAM2 : entity work.RAM_block
port map(
	address => addr(11 downto 2),
	clock	=> clk,
	data => Din2,
	wren => we2,
	q => b2
);

with tipo_acc select
	Din3 <= Din(7 downto 0) when "00", 
			  Din(15 downto 8) when "01",
			  Din(31 downto 24) when "10",
			  (others => '0') when others;


RAM3 : entity work.RAM_block
port map(
	address => addr(11 downto 2),
	clock	=> clk,
	data => Din3,
	wren => we3,
	q => b3
);

--MuxByte
with addr(1 downto 0) select 
	Dout0 <=  b0 when "00",
				 b1 when "01",
				 b2 when "10",
				 b3 when "11",
				 (others => '0') when others;
				 
--MuxMedia
with addr(1) select 
	Dout1 <=  b1 & b0 when '0',
				 b3 & b2 when '1',
				 (others => '0') when others;

--SigExt
VCDout <= (others => Dout0(7));

DSDout <= (others => Dout1(15));

with l_u select
	SigExtSig0 <= "000000000000000000000000" & Dout0 when '1',
					  VCDout & Dout0 when '0',
					  (others => '0') when others;

with l_u select
	SigExtSig1 <= "0000000000000000" & Dout1 when '1',
					  DSDout & Dout1 when '0',
					  (others => '0') when others;

					  
--Decodificador

s0 <= '1' when we_ram = '1' and tipo_acc = "00" else '0';
s1 <= '1' when we_ram = '1' and tipo_acc = "01" else '0';
we_w <= '1' when we_ram = '1' and tipo_acc = "10" else '0';

we_b0 <= '1' when s0 = '1' and addr(1 downto 0) = "00" else '0';
we_b1 <= '1' when s0 = '1' and addr(1 downto 0) = "01" else '0';
we_b2 <= '1' when s0 = '1' and addr(1 downto 0) = "10" else '0';
we_b3 <= '1' when s0 = '1' and addr(1 downto 0) = "11" else '0';	

we_h0 <= '1' when s1 = '1' and addr(1) = '0' else '0';
we_h1 <= '1' when s1 = '1' and addr(1) = '1' else '0';			  
					  

with tipo_acc select 
	Dout <= SigExtSig0 when "00",
			  SigExtSig1 when "01",
			  b3 & b2 & b1 & b0 when "10",
			  (others => '0') when others;


end behavioural;